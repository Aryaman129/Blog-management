// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  role        String   @default("ADMIN")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  blogPosts   BlogPost[]
  projects    Project[]

  @@map("users")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  author      String
  readTime    String
  category    String
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        TagOnBlogPost[]
  images      Image[]

  @@map("blog_posts")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String
  status      String   @default("PLANNED")
  category    String
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  demoUrl     String?
  githubUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  technologies TagOnProject[]
  images      Image[]

  @@map("projects")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogPosts TagOnBlogPost[]
  projects  TagOnProject[]

  @@map("tags")
}

model TagOnBlogPost {
  id         String   @id @default(cuid())
  blogPostId String
  tagId      String
  createdAt  DateTime @default(now())

  // Relations
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, tagId])
  @@map("tag_on_blog_post")
}

model TagOnProject {
  id        String   @id @default(cuid())
  projectId String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagId])
  @@map("tag_on_project")
}

model Image {
  id          String     @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String
  alt         String?
  type        String     @default("GENERAL")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations (optional - images can be standalone)
  blogPostId  String?
  projectId   String?
  blogPost    BlogPost?  @relation(fields: [blogPostId], references: [id], onDelete: SetNull)
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("images")
}

// Removed enums - using strings instead for SQLite compatibility
// Valid values for role: "ADMIN", "EDITOR", "USER"
// Valid values for project status: "COMPLETED", "IN_PROGRESS", "PLANNED"  
// Valid values for image type: "COVER", "GENERAL", "THUMBNAIL"
